# handlers/owner.py
from aiogram import Router, F
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
from db_manager.db import Database
from config import config


db = Database()
owner_router = Router()
OWNER_ID = config.bot.owner_id


class OwnerStates(StatesGroup):
    waiting_for_admin_id = State()
    waiting_for_alias = State()

# --- –ö–æ–º–∞–Ω–¥–∞ /owner ---
@owner_router.message(Command("owner"))
async def owner_panel(message: Message):
    if message.from_user.id != OWNER_ID:
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    count = db.count_admins()

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="owner_add_admin"),
         InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å", callback_data="owner_delete_admin")]
    ])

    await message.answer(f"üë• –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {count}", reply_markup=keyboard)

# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ---
@owner_router.callback_query(F.data == "owner_add_admin")
async def owner_add_admin(call: CallbackQuery, state: FSMContext):
    if call.from_user.id != OWNER_ID:
        await call.answer("üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    await call.message.edit_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
    await state.set_state(OwnerStates.waiting_for_admin_id)

@owner_router.message(F.contact, OwnerStates.waiting_for_admin_id)
async def process_admin_id(message: Message, state: FSMContext):
    admin_contact: Contact = message.contact
    admin_id = admin_contact.user_id
    owner_id = message.from_user.id
    
    user_exists = db.user_exists(admin_id)
    if not user_exists:
        await message.answer("–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ.")
        await state.clear()
        return

    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_admin:{admin_id}:{owner_id}")
    
    try:
        await message.bot.send_message(
            chat_id=admin_id,
            text="–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í–∞–º –ø—Ä–µ–¥–ª–æ–∂–∏–ª–∏ —Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –í—ã —Å–æ–≥–ª–∞—Å–Ω—ã?",
            reply_markup=builder.as_markup()
        )
        await message.answer("–ó–∞–ø—Ä–æ—Å –Ω–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
    except Exception as e:
        await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –û—à–∏–±–∫–∞: {e}")
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
    await state.clear()
    
    

@owner_router.callback_query(F.data.startswith("confirm_admin:"))
async def confirm_admin(call: CallbackQuery, state: FSMContext):
    parts = call.data.split(":")
    admin_id = int(parts[1])
    owner_id = int(parts[2])
    
    await call.message.edit_text("–í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! üéâ")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É —Å –∫–Ω–æ–ø–∫–æ–π "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
    builder = InlineKeyboardBuilder()
    builder.button(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data=f"set_alias:{admin_id}")
    
    await call.message.bot.send_message(
        chat_id=owner_id,
        text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–≥–ª–∞—Å–∏–ª—Å—è —Å—Ç–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
        reply_markup=builder.as_markup()
    )
    
    
@owner_router.callback_query(F.data.startswith("set_alias:"))
async def start_alias_input(call: CallbackQuery, state: FSMContext):
    admin_id = int(call.data.split(":")[1])
    owner_id = call.from_user.id # This is safe because the owner is clicking the button
    
    await call.message.edit_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø—Å–µ–≤–¥–æ–Ω–∏–º –¥–ª—è –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø—Å–µ–≤–¥–æ–Ω–∏–º–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    await state.set_state(OwnerStates.waiting_for_alias)
    await state.update_data(admin_id=admin_id)


    
    
    
    
    
    
    
    
    
    #await state.update_data(admin_id=admin_id)
    #await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Å–µ–≤–¥–æ–Ω–∏–º –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
    #await state.set_state(OwnerStates.waiting_for_alias)

@owner_router.message(OwnerStates.waiting_for_alias)
async def process_admin_alias(message: Message, state: FSMContext):
    alias = message.text.strip()
    data = await state.get_data()
    admin_id = data.get("admin_id")

    db.add_admin(admin_id, alias)
    await message.answer(f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω!\nüÜî ID: {admin_id}\nüë§ –ü—Å–µ–≤–¥–æ–Ω–∏–º: {alias}")
    await state.clear()

# --- –£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ---
@owner_router.callback_query(F.data == "owner_delete_admin")
async def owner_delete_admin(call: CallbackQuery):
    if call.from_user.id != OWNER_ID:
        await call.answer("üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    admins = db.get_all_admins()
    if not admins:
        await call.message.edit_text("‚ö†Ô∏è –ù–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=f"{alias or user_id}", callback_data=f"delete_admin:{user_id}")]
            for user_id, alias in admins
        ]
    )

    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)

@owner_router.callback_query(F.data.startswith("delete_admin:"))
async def delete_admin_confirm(call: CallbackQuery):
    if call.from_user.id != OWNER_ID:
        await call.answer("üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    admin_id = int(call.data.split(":")[1])
    db.delete_admin(admin_id)
    await call.message.edit_text(f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_id} —É–¥–∞–ª—ë–Ω.")