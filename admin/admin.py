# admin/specialist.py

from aiogram import Router, F, Bot
from aiogram.types import Message, Contact, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from datetime import datetime
import tempfile
import os
#from admin.keyboard import 
from aiogram.filters import Command
import asyncio
from admin.broadcast import send_broadcast_message
from db_manager.db import Database
from config import config
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.types.input_file import BufferedInputFile

from admin.report import generate_report


db = Database()

class SpecialistStates(StatesGroup):
    waiting_for_broadcast_content = State()
    waiting_for_answer_specialist = State()


admin_router = Router()


# --- –í–´–ë–û–† –î–ï–ô–°–¢–í–ò–Ø ---
@admin_router.message(Command("admin"))
async def start_admin(message: Message):
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —é–∑–µ—Ä –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–æ–≤
    if not db.is_admin(message.from_user.id):
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã—Ö –æ—Ç–∑—ã–≤–æ–≤
    count = db.count_feedback_with_status_zero()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    text = f"–£ –≤–∞—Å {count} –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã—Ö –∑–∞–¥–∞—á, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì® –ù–µ–∑–∞–∫—Ä—ã—Ç—ã–µ –∑–∞–¥–∞—á–∏", callback_data="show_open_feedbacks")],
        [InlineKeyboardButton(text="üóÇÔ∏è –í—Å–µ –∑–∞–¥–∞—á–∏", callback_data="show_all_feedbacks")],
        [InlineKeyboardButton(text="üìù –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="start_broadcast")],
        [InlineKeyboardButton(text="üìä –û—Ç—á–µ—Ç", callback_data="generate_report")],
        [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_callback")]
    ])
    
    await message.answer(text, reply_markup=keyboard)


# --- –õ–û–ì–ò–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò –ù–ï–ó–ê–ö–†–´–¢–´–• –û–¢–ó–´–í–û–í ---
@admin_router.callback_query(F.data == "show_open_feedbacks")
async def show_open_feedbacks(call: CallbackQuery):
    #user_id = call.from_user.id
    if not db.is_admin(call.from_user.id):
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return

    feedbacks = db.get_open_feedbacks()

    if not feedbacks:
        await call.message.edit_text("–ù–µ–∑–∞–∫—Ä—ã—Ç—ã—Ö –∑–∞–¥–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        await call.answer()
        return

    for fid, f_user_id, description in feedbacks:
        description = description or ""
        text = f"–û—Ç–∑—ã–≤ ‚Ññ{fid}\n–°—Ç–∞—Ç—É—Å: –Ω–µ–∑–∞–∫—Ä—ã—Ç–æ\n–¢–µ–∫—Å—Ç: {description}"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚òëÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"change_status:{fid}")],
            [InlineKeyboardButton(text="üîò –û—Ç–≤–µ—Ç–∏—Ç—å –∏ –ó–∞–∫—Ä—ã—Ç—å", callback_data=f"reply_close:{fid}")],
            [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data=f"delete_feedback:{fid}")],
            [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_callback")]
        ])
        await call.message.answer(text, reply_markup=keyboard)
        await asyncio.sleep(0.5)

    await call.answer()


@admin_router.message(SpecialistStates.waiting_for_answer_specialist)
async def process_feedback_reply(message: Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    target_user_id = data.get("reply_target_user_id")
    fid = data.get("reply_feedback_id")

    if not target_user_id or not fid:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞.")
        await state.clear()
        return

    reply_text = message.text or message.caption or ""
    if not reply_text:
        await message.answer("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç.")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        await bot.send_message(chat_id=target_user_id, text=reply_text)
    except Exception as e:
        await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
        # –≤—Å—ë —Ä–∞–≤–Ω–æ –ø–æ–º–µ—Ç–∏–º –∫–∞–∫ –∑–∞–∫—Ä—ã—Ç–æ –∏–ª–∏ –º–æ–∂–Ω–æ –Ω–µ –º–µ–Ω—è—Ç—å ‚Äî –≤ –¥–∞–Ω–Ω–æ–º –ø—Ä–∏–º–µ—Ä–µ –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
        await state.clear()
        return

    # –ü–æ–º–µ—á–∞–µ–º –æ—Ç–∑—ã–≤ –∫–∞–∫ –∑–∞–∫—Ä—ã—Ç—ã–π
    db.set_feedback_status(fid, 1)

    await message.answer(f"–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏ –æ—Ç–∑—ã–≤ ‚Ññ{fid} –∑–∞–∫—Ä—ã—Ç.")
    await state.clear()
    
    
@admin_router.callback_query(F.data.startswith("reply_close:"))
async def start_reply_and_close(call: CallbackQuery, state: FSMContext):
    user_id = call.from_user.id
    if not db.is_admin(user_id):
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return

    _, fid_str = call.data.split(":", 1)
    try:
        fid = int(fid_str)
    except ValueError:
        await call.answer("–ù–µ–≤–µ—Ä–Ω—ã–π id –æ—Ç–∑—ã–≤–∞", show_alert=True)
        return

    target_user_id = db.get_feedback_user_id(fid)
    if target_user_id is None:
        await call.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —ç—Ç–æ–≥–æ –æ—Ç–∑—ã–≤–∞", show_alert=True)
        return

    await state.update_data(reply_target_user_id=target_user_id, reply_feedback_id=fid)
    await state.set_state(SpecialistStates.waiting_for_answer_specialist)
    await call.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:")
    await call.answer()
    
# --- –ü–†–û–°–ú–û–¢–† –í–°–ï–• –°–û–û–ë–©–ï–ù–ò–ô ---
@admin_router.callback_query(F.data == "show_all_feedbacks")
async def show_all_feedbacks(call: CallbackQuery):
    user_id = call.from_user.id
    if not db.is_admin(user_id):
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return
    feedbacks = db.get_all_feedbacks()

    if not feedbacks:
        await call.message.edit_text("–ó–∞–¥–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        await call.answer()
        return
    
    for fid, f_user_id, description, status in feedbacks:
        description = description or ""
        status_text = "–Ω–µ–∑–∞–∫—Ä—ã—Ç–æ" if status == 0 else "–∑–∞–∫—Ä—ã—Ç–æ"
        text = f"–û—Ç–∑—ã–≤ ‚Ññ{fid}\n–°—Ç–∞—Ç—É—Å: {status_text}\n–¢–µ–∫—Å—Ç: {description}"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚òëÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"change_status:{fid}")],
            [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data=f"delete_feedback:{fid}")],
            [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data=f"close_callback")]
        ])
        await call.message.answer(text, reply_markup=keyboard)
        await asyncio.sleep(0.05)
    
    await call.answer()
    

@admin_router.callback_query(F.data.startswith("change_status:"))
async def change_feedback_status(call: CallbackQuery):
    user_id = call.from_user.id
    if not db.is_admin(user_id):
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return
    _, fid_str = call.data.split(":", 1)
    try:
        fid = int(fid_str)
    except ValueError:
        await call.answer("–ù–µ–≤–µ—Ä–Ω—ã–π id –æ—Ç–∑—ã–≤–∞", show_alert=True)
        return
    
    status = db.get_feedback_status(fid)
    if status is None:
        await call.answer("–û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    new_status = 0 if status == 1 else 1
    db.set_feedback_status(fid, new_status)
    await call.message.edit_text(f"–°—Ç–∞—Ç—É—Å –æ—Ç–∑—ã–≤–∞ ‚Ññ{fid} –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {'–∑–∞–∫—Ä—ã—Ç' if new_status == 1 else '–Ω–µ–∑–∞–∫—Ä—ã—Ç'}.")
    await call.answer()
    
    
@admin_router.callback_query(F.data.startswith("delete_feedback:"))
async def delete_feedback_handler(call: CallbackQuery):
    user_id = call.from_user.id
    if not db.is_admin(user_id):
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return
    _, fid_str = call.data.split(":", 1)
    try:
        fid = int(fid_str)
    except ValueError:
        await call.answer("–ù–µ–≤–µ—Ä–Ω—ã–π id –æ—Ç–∑—ã–≤–∞", show_alert=True)
        return
    
    db.delete_feedback(fid)
    await call.message.edit_text(f"–û—Ç–∑—ã–≤ ‚Ññ{fid} —É–¥–∞–ª—ë–Ω.")
    await call.answer()
    

# --- –õ–û–ì–ò–ö–ê –†–ê–°–°–´–õ–ö–ò ---
@admin_router.callback_query(F.data == "start_broadcast")
async def start_broadcast(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å URL-–∫–Ω–æ–ø–∫—É, —É–∫–∞–∂–∏—Ç–µ –µ—ë –≤ —Ñ–æ—Ä–º–∞—Ç–µ: `[–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏](URL)` –≤ –∫–æ–Ω—Ü–µ —Ç–µ–∫—Å—Ç–∞.")
    await state.set_state(SpecialistStates.waiting_for_broadcast_content)


@admin_router.message(SpecialistStates.waiting_for_broadcast_content)
async def process_broadcast_content(message: Message, state: FSMContext, bot: Bot):

    recipients = db.get_all_users()
    
    if not recipients:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
        await state.clear()
        return

    text = message.caption or message.text
    photo_id = message.photo[-1].file_id if message.photo else None
    video_id = message.video.file_id if message.video else None
    document_id = message.document.file_id if message.document else None
    url = None
    url_text = "–ü–µ—Ä–µ–π—Ç–∏"

    if text and text.count('](') == 1 and text.endswith(')'):
        try:
            url_text = text[text.rfind('[')+1:text.rfind(']')]
            url = text[text.rfind('(')+1:text.rfind(')')]
            text = text[:text.rfind('[')]
        except Exception:
            pass

    success_count = 0
    await message.answer("üöÄ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")
    
    for user_id in recipients:
        if await send_broadcast_message(bot, user_id, text, photo_id, video_id, document_id, url, url_text):
            success_count += 1
        await asyncio.sleep(0.5)

    await message.answer(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {success_count} –∏–∑ {len(recipients)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    await state.clear()
    
    
# --- –û—Ç—á–µ—Ç ---
@admin_router.callback_query(F.data == "generate_report")
async def generate_report_handler(call: CallbackQuery, bot: Bot):
    user_id = call.from_user.id
    if not db.is_admin(user_id):
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return
    #await call.message.edit_text("üìä –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç—á—ë—Ç, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

    try:
        bio, filename, summary = generate_report(db)  # –∫–∞–∫ —É —Ç–µ–±—è —Å–µ–π—á–∞—Å
        bio.seek(0)
        data_bytes = bio.read()
        await call.message.edit_text(summary)
        # –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ BufferedInputFile (—Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ç–æ–º –ø—Ä–æ–µ–∫—Ç–µ, –≥–¥–µ —É —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –ø—Ä–∏–º–µ—Ä)
        document = BufferedInputFile(data_bytes, filename=filename)
        
        await bot.send_document(chat_id=user_id, document=document)
        

    except Exception as e:
        await call.message.answer(f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞: {e}")

    await call.answer()